{"ast":null,"code":"Object.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar React = require('react');\nvar PropTypes = require('prop-types');\nvar ProgressBar = function (_a) {\n  var bgColor = _a.bgColor,\n    completed = _a.completed,\n    baseBgColor = _a.baseBgColor,\n    height = _a.height,\n    width = _a.width,\n    margin = _a.margin,\n    padding = _a.padding,\n    borderRadius = _a.borderRadius,\n    labelAlignment = _a.labelAlignment,\n    labelColor = _a.labelColor,\n    labelSize = _a.labelSize,\n    isLabelVisible = _a.isLabelVisible,\n    transitionDuration = _a.transitionDuration,\n    transitionTimingFunction = _a.transitionTimingFunction,\n    className = _a.className,\n    dir = _a.dir,\n    ariaValuemin = _a.ariaValuemin,\n    ariaValuemax = _a.ariaValuemax,\n    ariaValuetext = _a.ariaValuetext,\n    maxCompleted = _a.maxCompleted;\n  var getAlignment = function (alignmentOption) {\n    if (alignmentOption === \"left\") {\n      return \"flex-start\";\n    } else if (alignmentOption === \"center\") {\n      return \"center\";\n    } else if (alignmentOption === \"right\") {\n      return \"flex-end\";\n    } else {\n      return null;\n    }\n  };\n  var alignment = getAlignment(labelAlignment);\n  var getFillerWidth = function (maxCompletedValue, completedValue) {\n    if (maxCompletedValue) {\n      var ratio = Number(completedValue) / maxCompletedValue;\n      return ratio > 1 || typeof completedValue === \"string\" ? \"100%\" : ratio * 100 + \"%\";\n    }\n    return 0;\n  };\n  var fillerWidth = getFillerWidth(maxCompleted, completed);\n  var containerStyles = {\n    height: height,\n    backgroundColor: baseBgColor,\n    borderRadius: borderRadius,\n    padding: padding,\n    width: width,\n    margin: margin\n  };\n  var fillerStyles = {\n    height: height,\n    width: fillerWidth,\n    backgroundColor: bgColor,\n    transition: \"width \" + (transitionDuration || \"1s\") + \" \" + (transitionTimingFunction || \"ease-in-out\"),\n    borderRadius: \"inherit\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: labelAlignment !== \"outside\" && alignment ? alignment : \"normal\"\n  };\n  var labelStyles = {\n    padding: labelAlignment === \"outside\" ? \"0 0 0 5px\" : \"5px\",\n    color: labelColor,\n    fontWeight: \"bold\",\n    fontSize: labelSize,\n    display: !isLabelVisible ? \"none\" : \"initial\"\n  };\n  var outsideStyles = {\n    display: labelAlignment === \"outside\" ? \"flex\" : \"initial\",\n    alignItems: labelAlignment === \"outside\" ? \"center\" : \"initial\"\n  };\n  var completedStr = typeof completed === \"number\" ? completed + \"%\" : \"\" + completed;\n  return React.createElement(\"div\", {\n    style: outsideStyles,\n    className: className,\n    dir: dir,\n    role: \"progressbar\",\n    \"aria-valuenow\": parseFloat(completedStr),\n    \"aria-valuemin\": ariaValuemin,\n    \"aria-valuemax\": ariaValuemax,\n    \"aria-valuetext\": \"\" + (ariaValuetext === null ? completedStr : ariaValuetext)\n  }, React.createElement(\"div\", {\n    style: containerStyles\n  }, React.createElement(\"div\", {\n    style: fillerStyles\n  }, labelAlignment !== \"outside\" && React.createElement(\"span\", {\n    style: labelStyles\n  }, completedStr))), labelAlignment === \"outside\" && React.createElement(\"span\", {\n    style: labelStyles\n  }, completedStr));\n};\nProgressBar.propTypes = {\n  completed: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n  bgColor: PropTypes.string,\n  baseBgColor: PropTypes.string,\n  height: PropTypes.string,\n  width: PropTypes.string,\n  borderRadius: PropTypes.string,\n  margin: PropTypes.string,\n  padding: PropTypes.string,\n  labelAlignment: PropTypes.oneOf([\"left\", \"center\", \"right\", \"outside\"]),\n  labelColor: PropTypes.string,\n  labelSize: PropTypes.string,\n  isLabelVisible: PropTypes.bool,\n  className: PropTypes.string,\n  dir: PropTypes.oneOf([\"rtl\", \"ltr\", \"auto\"]),\n  maxCompleted: PropTypes.number\n};\nProgressBar.defaultProps = {\n  bgColor: \"#6a1b9a\",\n  height: \"20px\",\n  width: \"100%\",\n  borderRadius: \"50px\",\n  labelAlignment: \"right\",\n  baseBgColor: \"#e0e0de\",\n  labelColor: \"#fff\",\n  labelSize: \"15px\",\n  isLabelVisible: true,\n  dir: \"ltr\",\n  ariaValuemin: 0,\n  ariaValuemax: 100,\n  ariaValuetext: null,\n  maxCompleted: 100\n};\nexports.default = ProgressBar;","map":{"version":3,"names":["ProgressBar","_a","bgColor","completed","baseBgColor","height","width","margin","padding","borderRadius","labelAlignment","labelColor","labelSize","isLabelVisible","transitionDuration","transitionTimingFunction","className","dir","ariaValuemin","ariaValuemax","ariaValuetext","maxCompleted","getAlignment","alignmentOption","alignment","getFillerWidth","maxCompletedValue","completedValue","ratio","Number","fillerWidth","containerStyles","backgroundColor","fillerStyles","transition","display","alignItems","justifyContent","labelStyles","color","fontWeight","fontSize","outsideStyles","completedStr","React","createElement","style","role","parseFloat","propTypes","PropTypes","oneOfType","string","number","isRequired","oneOf","bool","defaultProps"],"sources":["../src/index.tsx"],"sourcesContent":["import * as React from \"react\";\nimport * as PropTypes from \"prop-types\";\n\nexport type ProgressBarProps = {\n  completed: string | number;\n  bgColor?: string;\n  baseBgColor?: string;\n  height?: string;\n  width?: string;\n  borderRadius?: string;\n  margin?: string;\n  padding?: string;\n  labelAlignment?: \"left\" | \"center\" | \"right\" | \"outside\";\n  labelColor?: string;\n  labelSize?: string;\n  isLabelVisible?: boolean;\n  transitionDuration?: string;\n  transitionTimingFunction?:\n    | \"ease\"\n    | \"linear\"\n    | \"ease-in\"\n    | \"ease-out\"\n    | \"ease-in-out\";\n  className?: string;\n  dir?: \"ltr\" | \"rtl\" | \"auto\";\n  ariaValuemin?: number;\n  ariaValuemax?: number;\n  ariaValuetext?: number | null;\n  maxCompleted?: number;\n};\n\nconst ProgressBar: React.FC<ProgressBarProps> = ({\n  bgColor,\n  completed,\n  baseBgColor,\n  height,\n  width,\n  margin,\n  padding,\n  borderRadius,\n  labelAlignment,\n  labelColor,\n  labelSize,\n  isLabelVisible,\n  transitionDuration,\n  transitionTimingFunction,\n  className,\n  dir,\n  ariaValuemin,\n  ariaValuemax,\n  ariaValuetext,\n  maxCompleted,\n}) => {\n  const getAlignment = (\n    alignmentOption: ProgressBarProps[\"labelAlignment\"]\n  ) => {\n    if (alignmentOption === \"left\") {\n      return \"flex-start\";\n    } else if (alignmentOption === \"center\") {\n      return \"center\";\n    } else if (alignmentOption === \"right\") {\n      return \"flex-end\";\n    } else {\n      return null;\n    }\n  };\n\n  const alignment = getAlignment(labelAlignment);\n\n  const getFillerWidth = (\n    maxCompletedValue: ProgressBarProps[\"maxCompleted\"],\n    completedValue: ProgressBarProps[\"completed\"]\n  ) => {\n    if (maxCompletedValue) {\n      const ratio = Number(completedValue) / maxCompletedValue;\n      return ratio > 1 || typeof completedValue === \"string\"\n        ? \"100%\"\n        : `${ratio * 100}%`;\n    }\n    return 0;\n  };\n\n  const fillerWidth = getFillerWidth(maxCompleted, completed);\n\n  const containerStyles: React.CSSProperties = {\n    height: height,\n    backgroundColor: baseBgColor,\n    borderRadius: borderRadius,\n    padding: padding,\n    width: width,\n    margin: margin,\n  };\n\n  const fillerStyles: React.CSSProperties = {\n    height: height,\n    width: fillerWidth,\n    backgroundColor: bgColor,\n    transition: `width ${transitionDuration || \"1s\"} ${\n      transitionTimingFunction || \"ease-in-out\"\n    }`,\n    borderRadius: \"inherit\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent:\n      labelAlignment !== \"outside\" && alignment ? alignment : \"normal\",\n  };\n\n  const labelStyles: React.CSSProperties = {\n    padding: labelAlignment === \"outside\" ? \"0 0 0 5px\" : \"5px\",\n    color: labelColor,\n    fontWeight: \"bold\",\n    fontSize: labelSize,\n    display: !isLabelVisible ? \"none\" : \"initial\",\n  };\n\n  const outsideStyles = {\n    display: labelAlignment === \"outside\" ? \"flex\" : \"initial\",\n    alignItems: labelAlignment === \"outside\" ? \"center\" : \"initial\",\n  };\n\n  const completedStr =\n    typeof completed === \"number\" ? `${completed}%` : `${completed}`;\n  return (\n    <div\n      style={outsideStyles}\n      className={className}\n      dir={dir}\n      role=\"progressbar\"\n      aria-valuenow={parseFloat(completedStr)}\n      aria-valuemin={ariaValuemin}\n      aria-valuemax={ariaValuemax}\n      aria-valuetext={`${\n        ariaValuetext === null ? completedStr : ariaValuetext\n      }`}\n    >\n      <div style={containerStyles}>\n        <div style={fillerStyles}>\n          {labelAlignment !== \"outside\" && (\n            <span style={labelStyles}>{completedStr}</span>\n          )}\n        </div>\n      </div>\n      {labelAlignment === \"outside\" && (\n        <span style={labelStyles}>{completedStr}</span>\n      )}\n    </div>\n  );\n};\n\nProgressBar.propTypes = {\n  completed: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n    .isRequired,\n  bgColor: PropTypes.string,\n  baseBgColor: PropTypes.string,\n  height: PropTypes.string,\n  width: PropTypes.string,\n  borderRadius: PropTypes.string,\n  margin: PropTypes.string,\n  padding: PropTypes.string,\n  labelAlignment: PropTypes.oneOf([\"left\", \"center\", \"right\", \"outside\"]),\n  labelColor: PropTypes.string,\n  labelSize: PropTypes.string,\n  isLabelVisible: PropTypes.bool,\n  className: PropTypes.string,\n  dir: PropTypes.oneOf([\"rtl\", \"ltr\", \"auto\"]),\n  maxCompleted: PropTypes.number,\n};\n\nProgressBar.defaultProps = {\n  bgColor: \"#6a1b9a\",\n  height: \"20px\",\n  width: \"100%\",\n  borderRadius: \"50px\",\n  labelAlignment: \"right\",\n  baseBgColor: \"#e0e0de\",\n  labelColor: \"#fff\",\n  labelSize: \"15px\",\n  isLabelVisible: true,\n  dir: \"ltr\",\n  ariaValuemin: 0,\n  ariaValuemax: 100,\n  ariaValuetext: null,\n  maxCompleted: 100,\n};\n\nexport default ProgressBar;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}